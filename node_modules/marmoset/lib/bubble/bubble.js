/**
 * support bubble for event
 *
 * Assume ctx1 is the parent of ctx2, when a event happened on ctx2,
 * ctx1 will happen this event too. This is event bubble.
 *
 *
 */

"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _node = require("./node");

var _node2 = _interopRequireDefault(_node);

var Face = function Face(opNodeCtxList) {
    var face = {};
    face.parent = function () {
        for (var _len = arguments.length, y = Array(_len), _key = 0; _key < _len; _key++) {
            y[_key] = arguments[_key];
        }

        parent.apply(undefined, y);
        return face;
    };
    face.children = function () {
        for (var _len2 = arguments.length, y = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            y[_key2] = arguments[_key2];
        }

        children.apply(undefined, y);
        return face;
    };

    var parent = function parent(childCtx, parentCtx) {
        var childNode = opNodeCtxList.getNode(childCtx);
        var parentNode = opNodeCtxList.getNode(parentCtx);
        parentNode.addChild(childNode);
    };

    var children = function children(parentCtx, childCtxs) {
        for (var i = 0; i < childCtxs.length; i++) {
            var childCtx = childCtxs[i];
            parent(childCtx, parentCtx);
        }
    };
    return face;
};

var OpNodeCtxList = function OpNodeCtxList(nodeCtxList) {
    var getNode = function getNode(ctx) {
        for (var i = 0; i < nodeCtxList.length; i++) {
            var nodeCtx = nodeCtxList[i];
            if (ctx === nodeCtx.ctx) return nodeCtx.node;
        }
        var node = new _node2["default"](ctx);
        nodeCtxList.push({
            ctx: ctx, node: node
        });
        return node;
    };

    var findNode = function findNode(ctx) {
        for (var i = 0; i < nodeCtxList.length; i++) {
            var nodeCtx = nodeCtxList[i];
            if (ctx === nodeCtx.ctx) return nodeCtx.node;
        }
        return null;
    };
    return {
        getNode: getNode,
        findNode: findNode
    };
};

exports["default"] = function () {

    /**
     * [(ctx, node)]
     */
    var nodeCtxList = [];
    var opNodeCtxList = OpNodeCtxList(nodeCtxList);
    var face = Face(opNodeCtxList);

    var triggerBubble = function triggerBubble(event, triggerNewEvent, eventStack) {
        var ctx = event.ctx;
        var node = opNodeCtxList.findNode(ctx);
        if (!node) return;
        var parent = node.getParent();
        if (!parent) return;
        if (event.isPropagationStopped()) return;
        if (happened(eventStack, parent.getData(), event.type)) return;
        triggerNewEvent(parent.getData(), event.type, event.data);
    };
    var relationship = function relationship(callback) {
        callback && callback(face);
    };

    var happened = function happened(eventStack, ctx, type) {
        for (var i = 0; i < eventStack.length; i++) {
            var eventWrapper = eventStack[i];
            var _name = eventWrapper.source.modelName;
            if (_name === undefined || _name === "bubble") {
                if (eventWrapper.event.ctx === ctx && eventWrapper.event.type === type) {
                    return true;
                }
            }
        }
        return false;
    };

    return {
        trigger: {
            name: "bubble",
            action: triggerBubble
        },
        builders: {
            relationship: relationship
        }
    };
};

module.exports = exports["default"];