/**
 * compatible with popular interface
 */

"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports["default"] = function (moment) {
    var bind = function bind(ctx) {
        return {
            trigger: function trigger() {
                for (var _len = arguments.length, y = Array(_len), _key = 0; _key < _len; _key++) {
                    y[_key] = arguments[_key];
                }

                y.unshift(ctx);
                return moment.trigger.apply(undefined, y);
            },
            on: function on() {
                for (var _len2 = arguments.length, y = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    y[_key2] = arguments[_key2];
                }

                y.unshift(ctx);
                return moment.on.apply(undefined, y);
            },
            off: function off() {
                for (var _len3 = arguments.length, y = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    y[_key3] = arguments[_key3];
                }

                y.unshift(ctx);
                return moment.off.apply(undefined, y);
            }
        };
    };

    var apply = function apply(clz) {
        clz.prototype.trigger = function () {
            for (var _len4 = arguments.length, y = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                y[_key4] = arguments[_key4];
            }

            y.unshift(this);
            return moment.trigger.apply(undefined, y);
        };
        clz.prototype.on = function () {
            for (var _len5 = arguments.length, y = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                y[_key5] = arguments[_key5];
            }

            y.unshift(this);
            return moment.on.apply(undefined, y);
        };
        clz.prototype.off = function () {
            for (var _len6 = arguments.length, y = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                y[_key6] = arguments[_key6];
            }

            y.unshift(this);
            return moment.off.apply(undefined, y);
        };
    };
    return {
        bind: bind, apply: apply
    };
};

module.exports = exports["default"];