/**
 *
 * TODO friendly exception
 *
 */

/**
 * SETMRule
 *
 * ruleType
 * filter
 * match
 * steps
 *
 * strict design for SETMRule calling
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _eventTypeChecker = require("./eventTypeChecker");

var _eventTypeChecker2 = _interopRequireDefault(_eventTypeChecker);

var _timelineInterface = require("./timelineInterface");

/**
 *
 * @return
 * bws [ { filter, steps, match } ]
 * prs [ { filter, steps, match } ]
 **/
var _getRules = function _getRules(setmRules, triggerEventRule, dataMergeRule) {
    var triggerEventMatch = getTriggerEventMatch(triggerEventRule);
    var dataMergeHandler = getDataMergeRule(dataMergeRule);

    var rules = [];
    for (var i = 0; i < setmRules.length; i++) {
        var ruleObj = getRuleOfSetm(setmRules[i]);
        rules.push(ruleObj);
    }
    return {
        triggerEventMatch: triggerEventMatch,
        dataMergeHandler: dataMergeHandler,
        rules: rules
    };
};

// (interests, steps, match)

var getRuleOfSetm = function getRuleOfSetm(setmRule) {
    return setmRule.end(function (queueInfo) {
        var map = queueInfo.getMap();
        var arrMap = queueInfo.getArrMap();
        var match = map["should"].args[0];
        var steps = undefined,
            ruleType = undefined;
        var lastBack = map["lookBackAt"];
        if (lastBack) {
            steps = lastBack.args[0];
            ruleType = "bw";
        } else {
            steps = map["lookForwardAt"].args[0];
            ruleType = "pr";
        }
        var interest = arrMap["interest"];
        return {
            steps: steps,
            match: match,
            ruleType: ruleType,
            interest: interest
        };
    });
};

var getDataMergeRule = function getDataMergeRule(dataMergeRule) {
    if (!dataMergeRule.mergeHandler) {
        dataMergeRule.mergeHandler = function (triggerEvent) {
            return triggerEvent.data;
        };
    }
    return dataMergeRule.mergeHandler;
};

var getTriggerEventMatch = function getTriggerEventMatch(triggerEventRule) {
    return triggerEventRule.end(function (queueInfo) {
        var map = queueInfo.getMap();
        if (map["match"]) {
            var matchRule = function matchRule(event) {
                return _eventTypeChecker2["default"].checkEventType(event, [{
                    ctxs: map["match"].args[0],
                    type: map["match"].args[1]
                }]);
            };
        }
        if (!matchRule) {
            var matchRule = function matchRule() {
                return 1;
            };
        }
        return matchRule;
    });
};

exports["default"] = {
    createManager: function createManager() {
        var setmRules = [];
        var triggerEventRule = undefined,
            dataMergeRule = undefined;
        return {
            createSETMRule: function createSETMRule() {
                return function () {
                    var rule = new _timelineInterface.SETMRule();
                    setmRules.push(rule);
                    return rule;
                };
            },
            createTriggerEventRule: function createTriggerEventRule() {
                triggerEventRule = new _timelineInterface.TriggerEventRule();
                return triggerEventRule;
            },
            createDataMergeRule: function createDataMergeRule() {
                dataMergeRule = new _timelineInterface.DataMergeRule();
                return dataMergeRule;
            },
            getRules: function getRules() {
                return _getRules(setmRules, triggerEventRule, dataMergeRule);
            }
        };
    }
};
module.exports = exports["default"];