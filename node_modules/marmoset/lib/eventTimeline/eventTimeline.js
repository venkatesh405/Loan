/**
 *
 * timeline
 * --------------t1----------------t2------------------------t3-------------------
 *                                  |               |
 *                                  |-------------(t2')
 * timeline graph
 *
 * for example: 
 * doubleclick
 * ------(click)------:far------click--:close--click-------:far---(doubleclick)----(click)------
 *                                               |                      |
 *                                               |----------------------|
 *
 * TODO split backward and prospective for better performance
 * 
 *
 * TODO opt coding orginization
 *
 * TODO es6 lint
 */

"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _adapterAdapterManager = require("./adapter/adapterManager");

var _adapterAdapterManager2 = _interopRequireDefault(_adapterAdapterManager);

var _forwardline = require("forwardline");

var _forwardline2 = _interopRequireDefault(_forwardline);

var _typevalidator = require("typevalidator");

var _typevalidator2 = _interopRequireDefault(_typevalidator);

var _setSearchRules = require("./setSearchRules");

var _setSearchRules2 = _interopRequireDefault(_setSearchRules);

var typeChecker = (0, _typevalidator2["default"])();

exports["default"] = function () {
    var timelineConditionMap = {};
    var forwardline = (0, _forwardline2["default"])();

    var createEventByTimeline = function createEventByTimeline(ctx, type, condition, delay) {
        typeChecker.checkBatch(["string", "function"], [type, condition]);

        var ruleMap = createRuleMap(condition);
        ruleMap.delay = delay;
        ruleMap.ctx = ctx;

        timelineConditionMap[type] = ruleMap;

        (0, _setSearchRules2["default"])(forwardline, type, ruleMap);
    };

    var createRuleMap = function createRuleMap(condition) {
        var manager = _adapterAdapterManager2["default"].createManager();

        var setmRuleFactory = manager.createSETMRule();
        var triggerEventRule = manager.createTriggerEventRule();
        var dataMergeRule = manager.createDataMergeRule();

        //
        condition(triggerEventRule, setmRuleFactory, dataMergeRule);

        var ruleMap = manager.getRules();
        return ruleMap;
    };

    var triggerTimeline = function triggerTimeline(event, triggerNewEvent) {
        // update timeline
        var search = forwardline.store(event).search;

        // trigger new event through timeline

        var _loop = function (type) {
            var ruleMap = timelineConditionMap[type];
            // check current event
            if (!ruleMap.triggerEventMatch(event)) {
                return "continue";
            }
            search(type, function (interests) {
                var result = doMatch(interests, event, ruleMap);

                if (!result) return;
                var ctx = ruleMap.ctx || event.ctx;
                var data = ruleMap.dataMergeHandler(event, interests);
                triggerNewEvent(ctx, type, data);

                forwardline.release();
            }, ruleMap.delay);
        };

        for (var type in timelineConditionMap) {
            var _ret = _loop(type);

            if (_ret === "continue") continue;
        }
    };

    var doMatch = function doMatch(interests, event, ruleMap) {
        var rules = ruleMap.rules;
        for (var i = 0; i < rules.length; i++) {
            var res = rules[i].match(interests[i], event);
            if (res === 0) {
                return 0;
            } else if (res === 1) {
                return 1;
            }
        }
        return 0;
    };

    return {
        trigger: {
            name: "timeline",
            action: triggerTimeline
        },
        builders: {
            createEventByTimeline: createEventByTimeline
        }
    };
};

module.exports = exports["default"];