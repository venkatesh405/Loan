"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _typevalidator = require("typevalidator");

var _typevalidator2 = _interopRequireDefault(_typevalidator);

var typeChecker = (0, _typevalidator2["default"])();

var setSearchRules = function setSearchRules(forwardline, type, ruleMap) {
    var rules = ruleMap.rules;
    var result = [];
    for (var i = 0; i < rules.length; i++) {
        var rule = rules[i];
        var filterObj = filterInterest(rule);
        result.push(filterObj);
    }
    forwardline.setSearchRules(type, result);
};

var filterInterest = function filterInterest(rule) {
    var interest = rule.interest,
        steps = rule.steps,
        ruleType = rule.ruleType;
    if (ruleType === "pr") {
        steps = -1 * steps;
    }
    var filterObj = {
        filter: [],
        dis: steps
    };
    for (var i = 0; i < interest.length; i++) {
        var item = interest[i];
        filterObj.filter.push([getCtxFilterItem(item.args[0]), getTypeFilterItem(item.args[1])]);
    }
    return filterObj;
};

var getCtxFilterItem = function getCtxFilterItem(ctxs) {
    var ctxsItem = {
        name: "ctx",
        value: ctxs,
        type: "equal"
    };
    if (typeChecker.validate("array", ctxs)) {
        ctxsItem.type = "in";
    }
    return ctxsItem;
};

var getTypeFilterItem = function getTypeFilterItem(type) {
    var typeItem = {
        name: "type",
        value: type,
        type: "equal"
    };
    if (typeChecker.validate("array", type)) {
        typeItem.type = "in";
    } else if (typeChecker.validate("regExp", type)) {
        typeItem.type = "regular";
    }
    return typeItem;
};

exports["default"] = setSearchRules;
module.exports = exports["default"];