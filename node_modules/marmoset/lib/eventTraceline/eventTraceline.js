/**
 * traceMap
 *      lastEventType
 *      case
 *      nextEvent
 */

"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _traceRuleAdapter = require("./traceRuleAdapter");

var _traceRuleAdapter2 = _interopRequireDefault(_traceRuleAdapter);

var _typevalidator = require("typevalidator");

var _typevalidator2 = _interopRequireDefault(_typevalidator);

var typeChecker = (0, _typevalidator2["default"])();

exports["default"] = function () {
    var traces = [];

    var routes = [];

    var triggerTraceline = function triggerTraceline(event, triggerNewEvent) {
        for (var i = 0; i < traces.length; i++) {
            var trace = traces[i];
            var nextEvent = trace.nextEvent;
            if (trace.lastEventType.type === event.type) {
                var res = trace["case"](event);
                if (res) {
                    // trigger next
                    triggerNewEvent(nextEvent.ctx, nextEvent.type, nextEvent.data);
                    // trigger before.next
                    var joinEvent = joinToNewEvent(trace, ".", event);
                    triggerNewEvent(joinEvent.ctx, joinEvent.type, joinEvent.data);
                }
            }
        }

        for (var i = 0; i < routes.length; i++) {
            var route = routes[i];
            var nextEvent = route.nextEvent;
            if (route.lastEventType.type === event.type) {
                var res = route["case"](event);
                if (res) {
                    // trigger before>next
                    var joinEvent = joinToNewEvent(route, ">", event);
                    triggerNewEvent(joinEvent.ctx, joinEvent.type, joinEvent.data);
                }
            }
        }
    };

    var joinToNewEvent = function joinToNewEvent(trace, jointer, event) {
        jointer = jointer || ".";
        var type = trace.lastEventType.type + jointer + trace.nextEvent.type;
        var ctx = trace.nextEvent.ctx;
        var data = trace.nextEvent.data;
        if (trace.nextEvent.dataRule) {
            data = trace.nextEvent.dataRule(event);
        }
        return {
            type: type, ctx: ctx, data: data
        };
    };

    var createEventByTraceline = function createEventByTraceline(condition) {
        var rules = fetchRules(condition);
        traces = traces.concat(rules);
    };

    var createEventByRoute = function createEventByRoute(condition) {
        var rules = fetchRules(condition);
        routes = routes.concat(rules);
    };

    var fetchRules = function fetchRules(condition) {
        typeChecker.check("function", condition);

        var adapter = (0, _traceRuleAdapter2["default"])();
        var factory = adapter.createRuleFactory();
        condition(factory);
        var rules = adapter.getRules();
        return rules;
    };

    return {
        builders: {
            createEventByTraceline: createEventByTraceline,
            createEventByRoute: createEventByRoute
        },
        trigger: {
            name: "traceline",
            action: triggerTraceline
        },
        specialMetas: [".", ">"]
    };
};

module.exports = exports["default"];