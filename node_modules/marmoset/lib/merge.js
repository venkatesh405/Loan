/**
 * interface of model
 *     name
 *     specialMetas
 *     trigger
 *     onModels
 *     onGroupModels
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _momentMoment = require("./moment/moment");

var _momentMoment2 = _interopRequireDefault(_momentMoment);

var _compatible = require("./compatible");

var _compatible2 = _interopRequireDefault(_compatible);

var merge = function merge() {
    var map1 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var map2 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    for (var _name in map2) {
        map1[_name] = map2[_name];
    }
    return map1;
};

var mergeList = function mergeList() {
    for (var _len = arguments.length, y = Array(_len), _key = 0; _key < _len; _key++) {
        y[_key] = arguments[_key];
    }

    if (y.length === 0) return null;else if (y.length === 1) return y[0];else {
        var _top = y[0];
        y.splice(0, 1);
        return merge(_top, mergeList.apply(undefined, y));
    }
};

var initMomentByModels = function initMomentByModels(models) {
    var specialMetas = [],
        triggerModels = [],
        onModels = [],
        onGroupModels = [];
    for (var i = 0; i < models.length; i++) {
        var model = models[i];
        specialMetas = specialMetas.concat(model.specialMetas || []);
        onModels = onModels.concat(model.onModels || []);
        onGroupModels = onGroupModels.concat(model.onGroupModels || []);
        if (model.trigger) {
            triggerModels.push(model.trigger);
        }
    }
    var moment = (0, _momentMoment2["default"])({
        specialMetas: specialMetas,
        triggerModels: triggerModels,
        onModels: onModels,
        onGroupModels: onGroupModels
    });
    return moment;
};

var gatherBuilders = function gatherBuilders(models) {
    var buildersList = [];
    for (var i = 0; i < models.length; i++) {
        var builders = models[i].builders;
        if (builders) {
            buildersList.push(builders);
        }
    }
    return buildersList;
};

exports["default"] = function (models) {
    var moment = initMomentByModels(models);
    return mergeList((0, _compatible2["default"])(moment), moment, mergeList.apply(undefined, gatherBuilders(models)));
};

module.exports = exports["default"];