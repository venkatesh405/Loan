/**
 * operation for handlerSet
 */

"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var handlerSet = function handlerSet() {
	var _handlerSet = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	var findHandlers = function findHandlers(ctx, type) {
		var val = getHandlerObj(ctx, type);
		if (!val) val = createEventType(ctx, type);
		return val.handlers;
	};

	var removeHandler = function removeHandler(ctx, type, handler) {
		var handlers = getHandlers(ctx, type);
		if (handlers === null) return;
		var index = handlers.findIndex(function (elem) {
			return elem === handler;
		});
		if (index !== -1) {
			handlers.splice(index, 1);
		}
	};

	var addHandler = function addHandler(ctx, type, handler) {
		// type check
		if (!type || typeof type !== "string" || typeof handler !== "function") return;
		var handlers = findHandlers(ctx, type);
		handlers.push(handler);
	};

	var getHandlers = function getHandlers(ctx, type) {
		var val = getHandlerObj(ctx, type);
		if (!val) return null;
		return val.handlers;
	};

	var getHandlerObj = function getHandlerObj(ctx, type) {
		var val = _handlerSet.find(function (elem, index) {
			if (elem.ctx === ctx && elem.type === type) {
				return true;
			}
		});
		return val;
	};

	var createEventType = function createEventType(ctx, type) {
		var eventType = {
			ctx: ctx, type: type, handlers: []
		};
		_handlerSet.push(eventType);
		return eventType;
	};

	return {
		findHandlers: findHandlers,
		removeHandler: removeHandler,
		addHandler: addHandler
	};
};

exports["default"] = handlerSet;
module.exports = exports["default"];