export default (timelineModel) => {
    var createCloseOrderEvent = (ctx, type) => {
        let sentences = type.split(";");
        let ctxs = [];
        for (let i = 0; i < sentences.length; i++) {
            ctxs.push(ctx);
        }
        createCloseGroupEvent(ctxs, type);
    }

    var createCloseGroupEvent = (ctxs, type) => {
        let types = type.split(";");
        while (types.length > 1) {
            let last = types.pop();
            let rest = types.join(";");
            addCloseEvent(ctxs, last, rest);
        }
    }

    var addCloseEvent = (ctxs, last, rest) => {
        let ctxLast = ctxs.pop();
        let ctxRest = ctxs[ctxs.length - 1];
        timelineModel.builders.createEventByTimeline(ctxLast, rest + ";" + last, (start, m, dataMerge) => {
            start.match([ctxLast], [last]);

            m().interest([ctxLast], [last]).
            interest([ctxRest], [rest]).
            lookBackAt(1).
            should((e) => {
                if (!e) return 0;
                if (e.type == rest) return 1;
                return 0;
            });

            dataMerge.merge(cur => cur.data);
        });
    }
    return {
        onModels: [createCloseOrderEvent],
        onGroupModels: [createCloseGroupEvent],
        specialMetas:[";"]
    }
};