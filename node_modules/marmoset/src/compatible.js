/**
 * compatible with popular interface
 */

export default (moment) => {
    let bind = (ctx) => {
        return {
            trigger: (...y) => {
                y.unshift(ctx);
                return moment.trigger.apply(undefined, y);
            },
            on: (...y) => {
                y.unshift(ctx);
                return moment.on.apply(undefined, y);
            },
            off: (...y) => {
                y.unshift(ctx);
                return moment.off.apply(undefined, y);
            }
        }
    }

    let apply = clz => {
        clz.prototype.trigger = function(...y) {
            y.unshift(this);
            return moment.trigger.apply(undefined, y);
        }
        clz.prototype.on = function(...y) {
            y.unshift(this);
            return moment.on.apply(undefined, y);
        }
        clz.prototype.off = function(...y) {
            y.unshift(this);
            return moment.off.apply(undefined, y);
        }
    }
    return {
        bind, apply
    }
}