import TypeChecker from "typevalidator";
var typeChecker = TypeChecker();

var setSearchRules = (forwardline, type, ruleMap) => {
    let rules = ruleMap.rules;
    let result = [];
    for (let i = 0; i < rules.length; i++) {
        let rule = rules[i];
        let filterObj = filterInterest(rule);
        result.push(filterObj);
    }
    forwardline.setSearchRules(type, result);
}

var filterInterest = (rule) => {
    let interest = rule.interest,
        steps = rule.steps,
        ruleType = rule.ruleType;
    if (ruleType === "pr") {
        steps = -1 * steps;
    }
    let filterObj = {
        filter: [],
        dis: steps
    }
    for (let i = 0; i < interest.length; i++) {
        let item = interest[i];
        filterObj.filter.push([
            getCtxFilterItem(item.args[0]),
            getTypeFilterItem(item.args[1])
        ]);
    }
    return filterObj;
}

var getCtxFilterItem = (ctxs) => {
    let ctxsItem = {
        name: "ctx",
        value: ctxs,
        type: "equal"
    };
    if (typeChecker.validate("array", ctxs)) {
        ctxsItem.type = "in";
    }
    return ctxsItem;
}

var getTypeFilterItem = (type) => {
    let typeItem = {
        name: "type",
        value: type,
        type: "equal"
    };
    if (typeChecker.validate("array", type)) {
        typeItem.type = "in";
    } else if (typeChecker.validate("regExp", type)) {
        typeItem.type = "regular";
    }
    return typeItem;
}

export default setSearchRules;