import handlerSet from "./handlerSet";
import Event from "./event.js";

var shadowClone = (obj) => {
    let newObj = {};
    for (var name in obj) {
        newObj[name] = obj[name];
    }
    return newObj;
}

export default () => {
    let handlerSetModel = handlerSet();

    var response = (event) => {
        let handlers = handlerSetModel.findHandlers(event.ctx, event.type);
        for (let i = 0; i < handlers.length; i++) {
            let elem = handlers[i];
            let clonedEvent = event.clone();
            elem(clonedEvent);

            // trick
            if(clonedEvent.isPropagationStopped()){
                event.stopPropagation();
            }
        }
    }

    var trigger = (ctx, type, data)=>{
        let event = new Event(ctx, type, data);
        response(event);
        return event;
    }
    return {
        on: handlerSetModel.addHandler,
        off: handlerSetModel.removeHandler,
        trigger: trigger
    }
}