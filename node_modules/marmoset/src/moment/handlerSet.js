/**
 * operation for handlerSet
 */

let handlerSet = (handlerSet = []) => {
	let findHandlers = (ctx, type) => {
		let val = getHandlerObj(ctx, type);
		if (!val)
			val = createEventType(ctx, type);
		return val.handlers;
	}

	let removeHandler = (ctx, type, handler) => {
		let handlers = getHandlers(ctx, type);
		if (handlers === null) return;
		let index = handlers.findIndex(elem => elem === handler);
		if (index !== -1) {
			handlers.splice(index, 1);
		}
	}

	let addHandler = (ctx, type, handler) => {
		// type check
		if (!type || typeof type !== "string" || typeof handler !== "function")
			return;
		let handlers = findHandlers(ctx, type);
		handlers.push(handler);
	}

	let getHandlers = (ctx, type) => {
		let val = getHandlerObj(ctx, type);
		if (!val)
			return null;
		return val.handlers;
	}

	let getHandlerObj = (ctx, type) => {
		let val = handlerSet.find((elem, index) => {
			if (elem.ctx === ctx && elem.type === type) {
				return true;
			}
		});
		return val;
	}

	let createEventType = (ctx, type) => {
		let eventType = {
			ctx, type, handlers: []
		};
		handlerSet.push(eventType);
		return eventType;
	}

	return {
		findHandlers,
		removeHandler,
		addHandler
	}
}

export default handlerSet;