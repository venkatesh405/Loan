import Marmoset from "../../index";
import assert from "assert";

describe("marmosetTest", () => {
    it("#on & trigger", (done) => {
        let marmoset = Marmoset();
        let ctx = {};
        marmoset.on(ctx, "test", (e) => {
            assert.equal(e.data.a, 100);
            e.data = null;
        });

        marmoset.on(ctx, "test", (e) => {
            assert.equal(e.data.a, 100);
            done();
        });

        marmoset.trigger(ctx, "test", {
            a: 100
        });
    });

    it("#only on", () => {
        let marmoset = Marmoset();
        let ctx = {};

        marmoset.on(ctx, "test", (e) => {
            assert.equal(e.data.a, 100);
            done();
        });
    });

    it("#only trigger", () => {
        let marmoset = Marmoset();
        let ctx = {};

        marmoset.trigger(ctx, "test", {
            a: 100
        });
    });

    it("#off", () => {
        let marmoset = Marmoset();
        let ctx = {};

        let count = 0;
        let handler = (e) => {
            count++;
        };

        marmoset.on(ctx, "test", handler);

        marmoset.trigger(ctx, "test", {
            a: 100
        });

        marmoset.off(ctx, "test", handler);

        marmoset.trigger(ctx, "test", {
            a: 100
        });
        assert.equal(count, 1);
    });

    it("#bind", () => {
        let marmoset = Marmoset();
        let ctx = {};

        let count = 0;
        let handler = (e) => {
            count++;
        };

        let b = marmoset.bind(ctx);

        b.on("test", handler);

        b.trigger("test", {
            a: 100
        });

        b.off("test", handler);

        b.trigger("test", {
            a: 100
        });
        assert.equal(count, 1);
    });

    it("#apply", () => {
        let marmoset = Marmoset();
        let clz = function() {}
        marmoset.apply(clz);

        let b = new clz();

        let count = 0;
        let handler = (e) => {
            count++;
        };

        b.on("test", handler);

        b.trigger("test", {
            a: 100
        });

        b.off("test", handler);

        b.trigger("test", {
            a: 100
        });
        assert.equal(count, 1);
    });

});