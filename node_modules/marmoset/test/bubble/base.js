import Marmoset from "../../index";
import assert from "assert";

describe("bubble", () => {
    it("#relationship", (done) => {
        let marmoset = Marmoset();
        let ctx = {},
            ctx2 = {};

        marmoset.relationship((face) => {
            face.parent(ctx, ctx2);
        });
        marmoset.on(ctx2, "test", (e) => {
            done();
        });

        marmoset.trigger(ctx, "test", {
            a: 100
        });
    });
    it("#circle", (done) => {
        let marmoset = Marmoset();
        let ctx = {},
            ctx2 = {},
            counter = 0;

        marmoset.relationship((face) => {
            // make circle on pupose
            face.parent(ctx, ctx2);
            face.parent(ctx2, ctx);
        });

        marmoset.on(ctx, "test", (e) => {
            counter++;
        });
        marmoset.on(ctx2, "test", (e) => {
            counter++;
            assert.equal(counter, 2);
            done();
        });

        marmoset.trigger(ctx, "test", {
            a: 100
        });
    });
    it("#stopPropagation", (done) => {
        let marmoset = Marmoset();
        let ctx = {},
            ctx2 = {},
            counter = 0;

        marmoset.relationship((face) => {
            face.parent(ctx, ctx2);
        });

        marmoset.on(ctx, "test", (e) => {
            e.stopPropagation();
            counter++;
        });
        marmoset.on(ctx2, "test", (e) => {
            counter++;
        });

        marmoset.trigger(ctx, "test", {
            a: 100
        });

        assert.equal(counter, 1);
        done();
    });
});