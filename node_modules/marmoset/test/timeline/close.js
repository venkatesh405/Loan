import Marmoset from "../../index";
import assert from "assert";

describe("timeline", () => {

    it("#close", (done) => {
        let marmoset = Marmoset();
        let ctx = {};

        marmoset.on(ctx, "e1;e2", (e) => {
            assert.equal(e.data, 22);
            done();
        });

        marmoset.trigger(ctx, "e2", 2);
        marmoset.trigger(ctx, "e1", 1);
        marmoset.trigger(ctx, "e2", 22);
        marmoset.trigger(ctx, "e2", 32);
    });

    it("#close > ;", (done) => {
        let marmoset = Marmoset();
        let ctx = {};

        marmoset.on(ctx, "e1>e2;e3", (e) => {
            assert.equal(e.data, 22);
            done();
        });

        marmoset.createEventByRoute((m) => {
            m().happen(ctx, "e1").inCase(e => true).trigger(ctx, "e2", 3);
        })

        marmoset.trigger(ctx, "e3", 2);
        marmoset.trigger(ctx, "e1", 1);
        marmoset.trigger(ctx, "e3", 22);
        marmoset.trigger(ctx, "e3", 32);

    });

    it("#close ; ;", (done) => {
        let marmoset = Marmoset();
        let ctx = {};

        marmoset.on(ctx, "e1; e2 ; e3", (e) => {
            assert.equal(e.data, 32);
            done();
        });

        marmoset.trigger(ctx, "e3", 2);
        marmoset.trigger(ctx, "e1", 1);
        marmoset.trigger(ctx, "e3", 52);
        marmoset.trigger(ctx, "e2", 22);
        marmoset.trigger(ctx, "e3", 32);
        marmoset.trigger(ctx, "e3", 42);

    });

    it("#onGroup ;", (done) => {
        let marmoset = Marmoset();
        let ctx1 = {
            c: 1
        };
        let ctx2 = {
            c: 2
        };

        marmoset.onGroup([ctx1, ctx2], "e1;e2", (e) => {
            assert.equal(e.data, 22);
            done();
        });

        marmoset.trigger(ctx2, "e2", 2);
        marmoset.trigger(ctx1, "e1", 1);
        marmoset.trigger(ctx2, "e2", 22);
        marmoset.trigger(ctx2, "e2", 222);
    });

    it("#onGroup ; ;", (done) => {
        let marmoset = Marmoset();
        let ctx1 = {
            c: 1
        };
        let ctx2 = {
            c: 2
        };
        let ctx3 = {
            c: 3
        };

        marmoset.onGroup([ctx1, ctx2, ctx3], "e1;e2;e3", (e) => {
            assert.equal(e.data, 32);
            done();
        });

        marmoset.trigger(ctx3, "e3", 2);
        marmoset.trigger(ctx1, "e1", 1);
        marmoset.trigger(ctx3, "e3", 52);
        marmoset.trigger(ctx2, "e2", 22);
        marmoset.trigger(ctx3, "e3", 32);
        marmoset.trigger(ctx3, "e3", 42);
    });
});