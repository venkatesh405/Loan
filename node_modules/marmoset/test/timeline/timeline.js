import Marmoset from "../../index";
import assert from "assert";

var createSingleclick = (marmoset, ctx) => {
	marmoset.createEventByTimeline(ctx, "singleclick", (start, m, dataMerge) => {

		start.match([ctx], "click");

		m().interest([ctx], "click").lookBackAt(1).should((e, source) => {
			if (!e) {
				return -1; // wait for next rule
			} else {
				if (source.time.getTime() - e.time.getTime() < 50) {
					return 0;
				} else {
					return -1;
				}
			}
		});

		m().interest([ctx], "click").lookForwardAt(1).should((e, source) => {
			if (!e) { // there is no click in the future after 50 ms
				return 1;
			} else {
				return 0;
			}
		});
	}, 50);
}

var createDoubleClick = (marmoset, ctx) => {
	marmoset.createEventByTimeline(ctx, "doubleclick", (start, m, dataMerge) => {

		start.match([ctx], "click");

		let firstBack = null;

		m().interest([ctx], "click").lookBackAt(1).should((e, source) => {
			if (!e) {
				return 0; // wait for next rule
			} else {
				if (source.time.getTime() - e.time.getTime() < 50) {
					firstBack = e;
					return -1;
				} else {
					return 0;
				}
			}
		});

		m().interest([ctx], "click").lookBackAt(2).should((e, source) => {
			if (!e) {
				return -1; // wait for next rule
			} else {
				if (firstBack.time.getTime() - e.time.getTime() < 50) {
					firstBack = null;
					return 0;
				} else {
					return -1;
				}
			}
		});

		m().interest([ctx], "click").lookForwardAt(1).should((e, source) => {
			if (!e) { // there is no click in the future after 50 ms
				return 1;
			} else {
				return 0;
			}
		});
	}, 50);
}

var createMultipleClick = (marmoset, ctx) => {
	marmoset.createEventByTimeline(ctx, "multipleclick", (start, m, dataMerge) => {

		start.match([ctx], "click");

		let firstBack = null;

		m().interest([ctx], "click").lookBackAt(1).should((e, source) => {
			if (!e) {
				return 0;
			} else {
				if (source.time.getTime() - e.time.getTime() < 50) {
					firstBack = e;
					return -1;
				} else {
					return 0;
				}
			}
		});

		m().interest([ctx], "click").lookBackAt(2).should((e, source) => {
			if (!e) {
				return 0;
			} else {
				if (firstBack.time.getTime() - e.time.getTime() < 50) {
					firstBack = null;
					return -1;
				} else {
					return 0;
				}
			}
		});

		m().interest([ctx], "click").lookForwardAt(1).should((e, source) => {
			if (!e) { // there is no click in the future after 50 ms
				return 1;
			} else {
				return 0;
			}
		});
	}, 50);
}



// define multipeclick

describe("timeline", () => {

	it("#createEventByTimeline: singleclick1", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let count = 0;

		marmoset.on(ctx, "singleclick", (e) => {
			count++;
		});

		createSingleclick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 1);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 30);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 3);
			setTimeout(() => {
				assert.equal(count, 1);
				done();
			}, 70)
		}, 90);
	});

	it("#createEventByTimeline: singleclick2", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let count = 0;

		marmoset.on(ctx, "singleclick", (e) => {
			count++;
		});

		createSingleclick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 1);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 70);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 3);
			setTimeout(() => {
				assert.equal(count, 3);
				done();
			}, 70)
		}, 160);
	});

	it("#createEventByTimeline: doubleclick && standard", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let count = 0;

		marmoset.on(ctx, "doubleclick", (e) => {
			count++;
		});

		createDoubleClick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 1);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 70);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 80);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 3);
			setTimeout(() => {
				assert.equal(count, 1);
				done();
			}, 70);
		}, 160);
	});

	it("#createEventByTimeline: doubleclick && tripple", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let count = 0;

		marmoset.on(ctx, "doubleclick", (e) => {
			count++;
		});

		createDoubleClick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 1);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 70);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 80);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 3);
			setTimeout(() => {
				assert.equal(count, 0);
				done();
			}, 70);
		}, 90);
	});

	it("#createEventByTimeline: doubleclick & no far backward", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let count = 0;

		marmoset.on(ctx, "doubleclick", (e) => {
			count++;
		});

		createDoubleClick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 1);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 30);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 3);
			setTimeout(() => {
				assert.equal(count, 1);
				done();
			}, 70);
		}, 100);
	});

	it("#createEventByTimeline: doubleclick & no far forward", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let count = 0;

		marmoset.on(ctx, "doubleclick", (e) => {
			count++;
		});

		createDoubleClick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 1);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 90);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 3);
			setTimeout(() => {
				assert.equal(count, 1);
				done();
			}, 70);
		}, 100);
	});

	it("#createEventByTimeline: multipleclick & standard", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let count = 0;

		marmoset.on(ctx, "multipleclick", (e) => {
			count++;
		});

		createMultipleClick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 1);

		//
		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 90);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 100);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 110);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 120);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 3);
			setTimeout(() => {
				assert.equal(count, 1);
				done();
			}, 70);
		}, 190);
	});

	it("#createEventByTimeline: multipleclick & no far forward", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let count = 0;

		marmoset.on(ctx, "multipleclick", (e) => {
			count++;
		});

		createMultipleClick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 1);

		//
		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 90);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 100);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 110);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
			setTimeout(() => {
				assert.equal(count, 1);
				done();
			}, 70);
		}, 120);

	});

	it("#createEventByTimeline: multipleclick & no far backward", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let count = 0;

		marmoset.on(ctx, "multipleclick", (e) => {
			count++;
		});

		createMultipleClick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 1);

		//
		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 10);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 3);
		}, 20);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 4);
		}, 60);

		//
		setTimeout(() => {
			marmoset.trigger(ctx, "click", 5);
			setTimeout(() => {
				assert.equal(count, 1);
				done();
			}, 70);
		}, 130);

	});

	it("#createEventByTimeline: mix singleclick and doubleclick", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let singleclickCount = 0;
		let doubleclickCount = 0;

		marmoset.on(ctx, "doubleclick", (e) => {
			doubleclickCount++;
		});

		marmoset.on(ctx, "singleclick", (e) => {
			singleclickCount++;
		});

		createSingleclick(marmoset, ctx);
		createDoubleClick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 1);

		//
		setTimeout(() => {
			marmoset.trigger(ctx, "click", 2);
		}, 70);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 3);
		}, 90);

		//
		setTimeout(() => {
			marmoset.trigger(ctx, "click", 5);
			setTimeout(() => {
				assert.equal(singleclickCount, 2);
				assert.equal(doubleclickCount, 1);
				done();
			}, 70);
		}, 160);
	});

	it("#createEventByTimeline: mix doubleclick and multipleclick", (done) => {
		let marmoset = Marmoset();
		let ctx = {};

		let doubleclickCount = 0;
		let multipleclickCount = 0;

		marmoset.on(ctx, "multipleclick", (e) => {
			multipleclickCount++;
		});

		marmoset.on(ctx, "doubleclick", (e) => {
			doubleclickCount++;
		});

		createMultipleClick(marmoset, ctx);
		createDoubleClick(marmoset, ctx);

		marmoset.trigger(ctx, "click", 10);

		//
		setTimeout(() => {
			marmoset.trigger(ctx, "click", 20);
		}, 70);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 30);
		}, 80);

		setTimeout(() => {
			marmoset.trigger(ctx, "click", 40);
		}, 90);

		//
		setTimeout(() => {
			marmoset.trigger(ctx, "click", 50);
			setTimeout(() => {
				assert.equal(multipleclickCount, 1);
				assert.equal(doubleclickCount, 0);
				done();
			}, 70);
		}, 160);
	});
});