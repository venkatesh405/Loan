import Marmoset from "../../index";
import assert from "assert";


describe("traceline", () => {

    it("#createEventByTraceline: base", (done) => {
        let marmoset = Marmoset();
        let ctx1 = {};
        let ctx2 = {};
        let counter = 0;

        marmoset.createEventByTraceline((m) => {
            m().happen(ctx1, "e1").inCase((e) => {
                return e.data === 1;
            }).trigger(ctx2, "e2", 3);
        })

        marmoset.on(ctx1, "e1", (e) => {
            counter += 10;
        });

        marmoset.on(ctx2, "e2", (e) => {
            counter += 50;
        });

        marmoset.on(ctx2, "e1.e2", (e) => {
            counter += 100;
        });

        marmoset.trigger(ctx1, "e1", 1);
        assert.equal(counter, 160);
        done();
    });

    it("#createEventByRoute: base", (done) => {
        let marmoset = Marmoset();
        let ctx = {};

        let counter = 0;

        marmoset.createEventByRoute((m) => {
            m().happen(ctx, "e1").inCase((e) => {
                return e.data === 1;
            }).trigger(ctx, "e2", 3);
        })

        marmoset.on(ctx, "e1", (e) => {
            counter += 10;
        });

        marmoset.on(ctx, "e2", (e) => {
            counter += 50;
        });

        marmoset.on(ctx, "e1>e2", (e) => {
            counter += 100;
        });

        marmoset.trigger(ctx, "e1", 1);
        assert.equal(counter, 110);
        done();
    });

    it("#createEventByRoute: data", (done) => {
        let marmoset = Marmoset();
        let ctx = {};

        marmoset.createEventByRoute((m) => {
            m().happen(ctx, "e1").inCase(e => {
                return e.data === 1;
            }).trigger(ctx, "e2", "3").data(e => {
                return 300 + e.data;
            });
        })

        marmoset.on(ctx, "e1>e2", (e) => {
            assert.equal(e.data, 301);
            done();
        });

        marmoset.trigger(ctx, "e1", 1);
    });
});